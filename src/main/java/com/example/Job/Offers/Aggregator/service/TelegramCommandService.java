package com.example.Job.Offers.Aggregator.service;

import com.example.Job.Offers.Aggregator.api.HhApiClient;
import com.example.Job.Offers.Aggregator.api.MessageInterface;
import com.example.Job.Offers.Aggregator.model.Vacancy;
import com.example.Job.Offers.Aggregator.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;

import java.util.List;


@Service
@Slf4j
public class TelegramCommandService {

    private final MessageInterface messageInterface;
    private final UserRepository userRepository;
    private final SubscriptionService subscriptionService;
    private final HhApiClient hhApiClient;

    @Autowired
    public TelegramCommandService(MessageInterface messageInterface, UserRepository userRepository,
                                  SubscriptionService subscriptionService, HhApiClient hhApiClient) {
        this.messageInterface = messageInterface;
        this.userRepository = userRepository;
        this.subscriptionService = subscriptionService;
        this.hhApiClient = hhApiClient;
    }

    public void handleUpdate(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                String text = update.getMessage().getText();
                Long chatId = update.getMessage().getChatId();
                User telegramUser = update.getMessage().getFrom();

                if (text.equals("/start")) {
                    handleStartCommand(chatId, telegramUser);
                } else if (text.startsWith("/subscribe")) {
                    handleSubscribeCommand(chatId, telegramUser, text);
                } else if (text.equals("/list")) {
                    handleListCommand(chatId, telegramUser.getId());
                } else if (text.equals("/unsubscribe_all")) {
                    handleUnsubscribeAllCommand(chatId, telegramUser);
                } else if (text.startsWith("/unsubscribe")) {
                    handleUnsubscribeCommand(chatId, telegramUser, text);
                }
            }
        } catch (Exception e) {
            log.error("Error processing update: {}", update, e);
            if (update.hasMessage()) {
                messageInterface.sendMessage(update.getMessage().getChatId(), "‚Äº\uFE0F–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ " +
                        "–æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }
    }

    private void handleStartCommand(Long chatId, User telegramUser) {
        try {
            userRepository.findByTelegramId(chatId).orElseGet(() -> {
                com.example.Job.Offers.Aggregator.model.User newUser = new com.example.Job.Offers.Aggregator.model.User();
                newUser.setTelegramId(chatId);
                newUser.setUsername(telegramUser.getUserName());
                return userRepository.save(newUser);
            });

            String welcomeText = String.format("""
                    üòÄ–ü—Ä–∏–≤–µ—Ç, %s! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
                    
                    /subscribe <–∑–∞–ø—Ä–æ—Å> - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
                    /unsubscribe <–∑–∞–ø—Ä–æ—Å> - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
                    /unsubscribe_all - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
                    /list - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    """, telegramUser.getUserName());

            messageInterface.sendMessage(chatId, welcomeText);
        } catch (Exception e) {
            log.error("Error handling /start command for chatId {}", chatId, e);
            throw new RuntimeException("Error handling /start command", e);
        }
    }

    private void handleSubscribeCommand(Long chatId, org.telegram.telegrambots.meta.api.objects.User telegramUser,
                                        String command) {
        try {
            String query = command.substring("/subscribe".length()).trim();

            if (query.isEmpty()) {
                String message = """
                        ‚ùó–£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.
                        –ù–∞–ø—Ä–∏–º–µ—Ä: /subscribe Java developer.
                        """;

                messageInterface.sendMessage(chatId, message);

                return;
            }

            if (subscriptionService.subscribe(telegramUser.getId(), query)) {

                String message = String.format("""
                        ‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É:
                        *%s*.
                        """, query);

                messageInterface.sendMessage(chatId, message);

                searchVacancy(chatId, query);

                return;
            }
            String message = """
                    ‚ùó–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.
                    –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.""";

            messageInterface.sendMessage(chatId, message);
        } catch (Exception e) {
            log.error("Error handling /subscribe command for chatId {}", chatId, e);
            throw new RuntimeException("Error handling /subscribe command", e);
        }
    }

    private void searchVacancy(Long chatId, String query) {
        String area = "1";

        List<Vacancy> vacancies = hhApiClient.searchVacancies(query, area);
        if (vacancies.isEmpty()) {
            messageInterface.sendMessage(chatId, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }
        else {
            vacancies.stream()
                    .limit(5)
                    .forEach(vacancy -> messageInterface.sendMessage(chatId, vacancy.toMessage()));
        }
    }

    private void handleListCommand(Long chatId, Long userId) {
        try {
            List<String> subscriptions = subscriptionService.getUserSubscriptions(userId);

            if (subscriptions.isEmpty()) {
                String message = "üòî–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.";

                messageInterface.sendMessage(chatId, message);
                return;
            }

            StringBuilder response = new StringBuilder("\uD83D\uDCDD–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n");
            int i = 1;
            for (String sub : subscriptions) {
                response.append(i).append(")").append(" ").append(sub).append("\n");
                i++;
            }

            response.append("\n–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe <–∑–∞–ø—Ä–æ—Å>\n");
            response.append("\n–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe_all");
            messageInterface.sendMessage(chatId, response.toString());
        } catch (Exception e) {
            log.error("Error handling /list command for chatId {}", chatId, e);
            throw new RuntimeException("Error handling /list command", e);
        }
    }

    private void handleUnsubscribeCommand(Long chatId, org.telegram.telegrambots.meta.api.objects.User telegramUser,
                                          String command) {
        try {
            String query = command.substring("/unsubscribe".length()).trim();

            if (query.isEmpty()) {
                String message = """
                        ‚ùó–£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.
                        –ù–∞–ø—Ä–∏–º–µ—Ä /unsubscribe Golang developer.
                        """;

                messageInterface.sendMessage(chatId, message);

                return;
            }

            if (subscriptionService.unsubscribe(telegramUser.getId(), query)) {
                String message = String.format("""
                    ‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É:
                    *%s*.
                    """, query);

                messageInterface.sendMessage(chatId, message);

                return;
            }

            messageInterface.sendMessage(chatId, "‚ùó–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.");

        } catch (Exception e) {
            log.error("Error handling /unsubscribe command for chatId {}", chatId, e);
            throw new RuntimeException("Error handling /unsubscribe command", e);
        }
    }

    private void handleUnsubscribeAllCommand(Long chatId,
                                             org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        try {
            if (subscriptionService.unsubscribeAll(telegramUser.getId())) {
                messageInterface.sendMessage(chatId, "‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π.");

                return;
            }

            messageInterface.sendMessage(chatId, "‚ùó–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.");
        } catch (Exception e) {
            log.error("Error handling /unsubscribeAll command for chatId {}", chatId, e);
            throw new RuntimeException("Error handling /unsubscribeAll command", e);
        }
    }
}
